{"version":3,"sources":["scripts/main.js"],"names":["thead","document","querySelector","tBody","rowsList","querySelectorAll","leaveNumbers","RegExp","numbersFilter","value","Number","replace","sortByColumnName","callback","tableRows","columnPosition","fieldName","sortStrings","sortedColumn","sort","prevPerson","nextPerson","prevProperty","children","textContent","nextProperty","localeCompare","match","addEventListener","e","selectedTarget","target","column","cellIndex","append"],"mappings":";AAAA,aAgDA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA9CA,IAAMA,EAAQC,SAASC,cAAc,MAC/BC,EAAQF,SAASC,cAAc,SAC/BE,EAAeD,EAAAA,EAAME,iBAAiB,OAEtCC,EAAe,IAAIC,OAAO,UAEhC,SAASC,EAAcC,GACdC,OAAAA,OAAOD,EAAME,QAAQL,EAAc,KAG5C,SAASM,EAAiBC,EAAUC,EAAWC,EAAgBC,GACvDC,IAkBFC,EAAe,KAEXF,OAAAA,GACD,IAAA,OACA,IAAA,WACHE,EAAeJ,EAAUK,KAvBT,SAACC,EAAYC,GACzBC,IAAAA,EAAeF,EAAWG,SAASR,GAAgBS,YACnDC,EAAeJ,EAAWE,SAASR,GAAgBS,YAElDF,OAAAA,EAAaI,cAAcD,KAoBhC,MAEG,IAAA,MACA,IAAA,SACHP,EAAeJ,EAAUK,KArBT,SAACC,EAAYC,GACzBC,IAAAA,EAAeF,EAAWG,SAASR,GAAgBS,YACnDC,EAAeJ,EAAWE,SAASR,GAAgBS,YAErDF,OAAqC,OAArCA,EAAaK,MAAMrB,GACdO,EAASS,GAAgBT,EAASY,GAGpCH,EAAeG,IAiBjBP,OAAAA,EAGTlB,EAAM4B,iBAAiB,QAAS,SAAAC,GACxBC,IAAAA,EAAiBD,EAAEE,OAAOP,YAC1BQ,EAASH,EAAEE,OAAOE,UAElBf,EAAeN,EACnBJ,EAAeJ,EAAU4B,EAAQF,GAGnC3B,EAAM+B,OAAN/B,MAAAA,EAAgBe,EAAAA","file":"main.8ab2b142.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst thead = document.querySelector('tr');\nconst tBody = document.querySelector('tbody');\nconst rowsList = [...tBody.querySelectorAll('tr')];\n\nconst leaveNumbers = new RegExp(/[^\\d]/g);\n\nfunction numbersFilter(value) {\n  return Number(value.replace(leaveNumbers, ''));\n}\n\nfunction sortByColumnName(callback, tableRows, columnPosition, fieldName) {\n  const sortStrings = (prevPerson, nextPerson) => {\n    const prevProperty = prevPerson.children[columnPosition].textContent;\n    const nextProperty = nextPerson.children[columnPosition].textContent;\n\n    return prevProperty.localeCompare(nextProperty);\n  };\n\n  const sortNumbers = (prevPerson, nextPerson) => {\n    const prevProperty = prevPerson.children[columnPosition].textContent;\n    const nextProperty = nextPerson.children[columnPosition].textContent;\n\n    if (prevProperty.match(leaveNumbers) !== null) {\n      return callback(prevProperty) - callback(nextProperty);\n    }\n\n    return prevProperty - nextProperty;\n  };\n\n  let sortedColumn = null;\n\n  switch (fieldName) {\n    case 'Name':\n    case 'Position':\n      sortedColumn = tableRows.sort(sortStrings);\n      break;\n\n    case 'Age':\n    case 'Salary':\n      sortedColumn = tableRows.sort(sortNumbers);\n      break;\n  }\n\n  return sortedColumn;\n}\n\nthead.addEventListener('click', e => {\n  const selectedTarget = e.target.textContent;\n  const column = e.target.cellIndex;\n\n  const sortedColumn = sortByColumnName(\n    numbersFilter, rowsList, column, selectedTarget\n  );\n\n  tBody.append(...sortedColumn);\n});\n"]}